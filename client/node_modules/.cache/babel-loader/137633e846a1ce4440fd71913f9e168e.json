{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Projects/playlist-app/client/src/components/PlayerComponent.js\";\nimport React from 'react';\nimport SearchComponent from './SearchComponent'; // import ControlsComponent from './components/ControlsComponent'\n\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass Player extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      trackName: \"Track Name\",\n      artistName: \"Artist Name\",\n      albumName: \"Album Name\",\n      playing: false,\n      position: 0,\n      duration: 0\n    };\n  }\n\n  componentDidMount() {\n    const accessToken = this.props.accessToken;\n    console.log(accessToken);\n    this.loadPlayer(accessToken);\n    spotifyApi.setAccessToken(accessToken);\n  }\n\n  async waitForSpotifyWebPlaybackSDKToLoad() {\n    return new Promise(resolve => {\n      if (window.Spotify) {\n        resolve(window.Spotify);\n      } else {\n        window.onSpotifyWebPlaybackSDKReady = () => {\n          resolve(window.Spotify);\n        };\n      }\n    });\n  }\n\n  loadPlayer(token) {\n    (async () => {\n      const _ref = await this.waitForSpotifyWebPlaybackSDKToLoad(),\n            Player = _ref.Player;\n\n      const sdk = new Player({\n        name: \"Mike's Test Spotify Player\",\n        getOAuthToken: cb => {\n          cb(token);\n        }\n      });\n      this.createEventHandlers(sdk, token);\n      let connected = await sdk.connect();\n\n      if (connected) {\n        let state = await sdk.getCurrentState();\n      }\n    })();\n  }\n\n  createEventHandlers(player, token) {\n    player.on('initialization_error', e => {\n      console.error(e);\n    });\n    player.on('authentication_error', e => {\n      console.error(e);\n      this.setState({\n        loggedIn: false\n      });\n    });\n    player.on('account_error', e => {\n      console.error(e);\n    });\n    player.on('playback_error', e => {\n      console.error(e);\n    }); // Playback status updates\n\n    player.on('player_state_changed', state => this.onStateChanged(state)); // Ready\n\n    player.on('ready', async data => {\n      let device_id = data.device_id;\n      await this.setState({\n        deviceId: device_id\n      });\n      this.transferPlaybackHere(device_id, token);\n    });\n  }\n\n  onStateChanged(state) {\n    // if we're no longer listening to music, we'll get a null state.\n    if (state !== null) {\n      const _state$track_window = state.track_window,\n            currentTrack = _state$track_window.current_track,\n            position = _state$track_window.position,\n            duration = _state$track_window.duration;\n      const trackName = currentTrack.name;\n      const albumName = currentTrack.album.name;\n      const artistName = currentTrack.artists.map(artist => artist.name).join(\", \");\n      const playing = !state.paused;\n      this.setState({\n        position,\n        duration,\n        trackName,\n        albumName,\n        artistName,\n        playing\n      });\n    }\n  }\n\n  transferPlaybackHere(deviceId, token) {\n    //Probably should update this with axios later\n    //Change play back to true.\n    fetch(\"https://api.spotify.com/v1/me/player\", {\n      method: \"PUT\",\n      headers: {\n        authorization: \"Bearer \".concat(token),\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"device_ids\": [deviceId],\n        \"play\": true\n      })\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          artistName = _this$state.artistName,\n          trackName = _this$state.trackName,\n          albumName = _this$state.albumName;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"This is the player\", React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Artist: \", artistName), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Track: \", trackName), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Album: \", albumName), React.createElement(SearchComponent, {\n      acessToken: this.props.accessToken,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Player;","map":{"version":3,"sources":["/Users/mike/Projects/playlist-app/client/src/components/PlayerComponent.js"],"names":["React","SearchComponent","SpotifyWebApi","spotifyApi","Player","Component","constructor","props","state","trackName","artistName","albumName","playing","position","duration","componentDidMount","accessToken","console","log","loadPlayer","setAccessToken","waitForSpotifyWebPlaybackSDKToLoad","Promise","resolve","window","Spotify","onSpotifyWebPlaybackSDKReady","token","sdk","name","getOAuthToken","cb","createEventHandlers","connected","connect","getCurrentState","player","on","e","error","setState","loggedIn","onStateChanged","data","device_id","deviceId","transferPlaybackHere","track_window","currentTrack","current_track","album","artists","map","artist","join","paused","fetch","method","headers","authorization","body","JSON","stringify","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport SearchComponent from './SearchComponent'\n// import ControlsComponent from './components/ControlsComponent'\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass Player extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      trackName: \"Track Name\",\n      artistName: \"Artist Name\",\n      albumName: \"Album Name\",\n      playing: false,\n      position: 0,\n      duration: 0,\n    };\n  }\n  componentDidMount() {\n    const accessToken = this.props.accessToken\n    console.log(accessToken)\n    this.loadPlayer(accessToken);\n    spotifyApi.setAccessToken(accessToken);\n  }\n  async waitForSpotifyWebPlaybackSDKToLoad () {\n    return new Promise(resolve => {\n      if (window.Spotify) {\n        resolve(window.Spotify);\n      } else {\n        window.onSpotifyWebPlaybackSDKReady = () => {\n          resolve(window.Spotify);\n        };\n      }\n    });\n  };\n\n  loadPlayer(token){\n    (async () => {\n      const { Player } = await this.waitForSpotifyWebPlaybackSDKToLoad();\n      const sdk = new Player({\n        name: \"Mike's Test Spotify Player\",\n        getOAuthToken: cb => { cb(token); },\n      });\n      this.createEventHandlers(sdk, token);\n      let connected = await sdk.connect();\n      if (connected) {\n        let state = await sdk.getCurrentState();\n      }\n    })();\n  }\n\n  createEventHandlers(player, token) {\n    player.on('initialization_error', e => { console.error(e); });\n    player.on('authentication_error', e => {\n      console.error(e);\n      this.setState({ loggedIn: false });\n    });\n    player.on('account_error', e => { console.error(e); });\n    player.on('playback_error', e => { console.error(e); });\n\n    // Playback status updates\n    player.on('player_state_changed', state => this.onStateChanged(state));\n\n    // Ready\n    player.on('ready', async data => {\n      let { device_id } = data;\n      await this.setState({ deviceId: device_id });\n      this.transferPlaybackHere(device_id, token);\n    });\n  }\n  onStateChanged(state) {\n    // if we're no longer listening to music, we'll get a null state.\n    if (state !== null) {\n      const {\n        current_track: currentTrack,\n        position,\n        duration,\n      } = state.track_window;\n      const trackName = currentTrack.name;\n      const albumName = currentTrack.album.name;\n      const artistName = currentTrack.artists\n        .map(artist => artist.name)\n        .join(\", \");\n      const playing = !state.paused;\n      this.setState({\n        position,\n        duration,\n        trackName,\n        albumName,\n        artistName,\n        playing\n      });\n    }\n  }\n\n  transferPlaybackHere(deviceId, token) {\n    //Probably should update this with axios later\n    //Change play back to true.\n    fetch(\"https://api.spotify.com/v1/me/player\", {\n      method: \"PUT\",\n      headers: {\n        authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        \"device_ids\": [ deviceId ],\n        \"play\": true,\n      }),\n    });\n  }\n\n  render() {\n      const {\n        artistName,\n        trackName,\n        albumName\n      } = this.state;\n    return (\n      <div>\n      This is the player\n      <p>Artist: {artistName}</p>\n      <p>Track: {trackName}</p>\n      <p>Album: {albumName}</p>\n      <SearchComponent acessToken={this.props.accessToken}/>\n      </div>\n    )\n  }\n}\nexport default Player\n"]},"metadata":{},"sourceType":"module"}