{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Projects/playlist-app/client/src/App.js\";\nimport React from 'react';\nimport SearchComponent from './components/SearchComponent';\nimport ControlsComponent from './components/ControlsComponent';\nimport LoginComponent from './components/LoginComponent';\nimport axios from 'axios';\nimport './App.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nconst queryString = require('query-string');\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      //token: \"\",\n      token: \"\",\n      deviceId: \"\",\n      loggedIn: false,\n      error: \"\",\n      trackName: \"Track Name\",\n      artistName: \"Artist Name\",\n      albumName: \"Album Name\",\n      playing: false,\n      position: 0,\n      duration: 0\n    };\n    this.playerCheckInterval = null;\n  }\n\n  componentDidMount() {\n    const parsed = queryString.parse(this.props.location.search);\n    const code = parsed.code;\n    axios.get('/spotify/config', {\n      params: {\n        code: code,\n        state: 'needToDoThis'\n      }\n    }).then(function (response) {\n      const access_token = response.data.access_token;\n      const refresh_token = response.data.refresh_token;\n      console.log(access_token);\n      spotifyApi.setAccessToken(access_token);\n      spotifyApi.getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE', function (err, data) {\n        if (err) console.error(err);else console.log('Artist albums', data);\n      });\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  handleLogin() {\n    if (this.state.token !== \"\") {\n      this.setState({\n        loggedIn: true\n      }); // check every second for the player.\n\n      this.playerCheckInterval = setInterval(() => this.checkForPlayer(), 1000);\n    }\n  }\n\n  checkForPlayer() {\n    const token = this.state.token;\n\n    if (window.Spotify !== null) {\n      // cancel the interval\n      clearInterval(this.playerCheckInterval);\n      this.player = new window.Spotify.Player({\n        name: \"Mike's Spotify Player\",\n        getOAuthToken: cb => {\n          cb(token);\n        }\n      });\n      this.createEventHandlers(); // finally, connect!\n\n      this.player.connect();\n    }\n  }\n\n  createEventHandlers() {\n    this.player.on('initialization_error', e => {\n      console.error(e);\n    });\n    this.player.on('authentication_error', e => {\n      console.error(e);\n      this.setState({\n        loggedIn: false\n      });\n    });\n    this.player.on('account_error', e => {\n      console.error(e);\n    });\n    this.player.on('playback_error', e => {\n      console.error(e);\n    }); // Playback status updates\n\n    this.player.on('player_state_changed', state => this.onStateChanged(state)); // Ready\n\n    this.player.on('ready', async data => {\n      let device_id = data.device_id;\n      console.log(\"Let the music play on!\");\n      await this.setState({\n        deviceId: device_id\n      });\n      this.transferPlaybackHere();\n    });\n  }\n\n  onStateChanged(state) {\n    // if we're no longer listening to music, we'll get a null state.\n    if (state !== null) {\n      const _state$track_window = state.track_window,\n            currentTrack = _state$track_window.current_track,\n            position = _state$track_window.position,\n            duration = _state$track_window.duration;\n      const trackName = currentTrack.name;\n      const albumName = currentTrack.album.name;\n      const artistName = currentTrack.artists.map(artist => artist.name).join(\", \");\n      const playing = !state.paused;\n      this.setState({\n        position,\n        duration,\n        trackName,\n        albumName,\n        artistName,\n        playing\n      });\n    }\n  }\n\n  transferPlaybackHere() {\n    //Probably should update this with axios later\n    const _this$state = this.state,\n          deviceId = _this$state.deviceId,\n          token = _this$state.token;\n    fetch(\"https://api.spotify.com/v1/me/player\", {\n      method: \"PUT\",\n      headers: {\n        authorization: \"Bearer \".concat(token),\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"device_ids\": [deviceId],\n        \"play\": true\n      })\n    });\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          token = _this$state2.token,\n          loggedIn = _this$state2.loggedIn,\n          artistName = _this$state2.artistName,\n          trackName = _this$state2.trackName,\n          albumName = _this$state2.albumName,\n          error = _this$state2.error,\n          position = _this$state2.position,\n          duration = _this$state2.duration,\n          playing = _this$state2.playing;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"Now Playing\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"A Spotify Web Playback API Demo.\"), error && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Error: \", error), loggedIn ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(SearchComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"Artist: \", artistName), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"Track: \", trackName), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"Album: \", albumName), React.createElement(ControlsComponent, {\n      playing: playing,\n      player: this.player,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(LoginComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      value: token,\n      onChange: e => this.setState({\n        token: e.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/mike/Projects/playlist-app/client/src/App.js"],"names":["React","SearchComponent","ControlsComponent","LoginComponent","axios","SpotifyWebApi","spotifyApi","queryString","require","App","Component","constructor","props","state","token","deviceId","loggedIn","error","trackName","artistName","albumName","playing","position","duration","playerCheckInterval","componentDidMount","parsed","parse","location","search","code","get","params","then","response","access_token","data","refresh_token","console","log","setAccessToken","getArtistAlbums","err","catch","handleLogin","setState","setInterval","checkForPlayer","window","Spotify","clearInterval","player","Player","name","getOAuthToken","cb","createEventHandlers","connect","on","e","onStateChanged","device_id","transferPlaybackHere","track_window","currentTrack","current_track","album","artists","map","artist","join","paused","fetch","method","headers","authorization","body","JSON","stringify","render","target","value"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SearchComponent from './components/SearchComponent'\nimport ControlsComponent from './components/ControlsComponent'\nimport LoginComponent from './components/LoginComponent'\nimport axios from 'axios';\nimport './App.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nconst queryString = require('query-string');\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      //token: \"\",\n      token: \"\",\n      deviceId: \"\",\n      loggedIn: false,\n      error: \"\",\n      trackName: \"Track Name\",\n      artistName: \"Artist Name\",\n      albumName: \"Album Name\",\n      playing: false,\n      position: 0,\n      duration: 0,\n    };\n    this.playerCheckInterval = null;\n  }\n  componentDidMount() {\n    const parsed = queryString.parse(this.props.location.search);\n    const code = parsed.code\n    axios.get('/spotify/config', {\n    params: {\n        code: code,\n        state: 'needToDoThis'\n      }\n    })\n    .then(function (response) {\n      const access_token = response.data.access_token;\n      const refresh_token = response.data.refresh_token;\n      console.log(access_token)\n      spotifyApi.setAccessToken(access_token);\n      spotifyApi.getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE', function(err, data) {\n        if (err) console.error(err);\n        else console.log('Artist albums', data);\n      });\n\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n\n  }\n  handleLogin() {\n    if (this.state.token !== \"\") {\n      this.setState({ loggedIn: true });\n      // check every second for the player.\n      this.playerCheckInterval = setInterval(() => this.checkForPlayer(), 1000);\n    }\n  }\n  checkForPlayer() {\n    const { token } = this.state;\n\n    if (window.Spotify !== null) {\n      // cancel the interval\n      clearInterval(this.playerCheckInterval);\n\n      this.player = new window.Spotify.Player({\n        name: \"Mike's Spotify Player\",\n        getOAuthToken: cb => { cb(token); },\n      });\n      this.createEventHandlers();\n\n      // finally, connect!\n      this.player.connect();\n    }\n  }\n  createEventHandlers() {\n    this.player.on('initialization_error', e => { console.error(e); });\n    this.player.on('authentication_error', e => {\n      console.error(e);\n      this.setState({ loggedIn: false });\n    });\n    this.player.on('account_error', e => { console.error(e); });\n    this.player.on('playback_error', e => { console.error(e); });\n\n    // Playback status updates\n    this.player.on('player_state_changed', state => this.onStateChanged(state));\n\n    // Ready\n    this.player.on('ready', async data => {\n      let { device_id } = data;\n      console.log(\"Let the music play on!\");\n      await this.setState({ deviceId: device_id });\n      this.transferPlaybackHere();\n    });\n\n  }\n  onStateChanged(state) {\n    // if we're no longer listening to music, we'll get a null state.\n    if (state !== null) {\n      const {\n        current_track: currentTrack,\n        position,\n        duration,\n      } = state.track_window;\n      const trackName = currentTrack.name;\n      const albumName = currentTrack.album.name;\n      const artistName = currentTrack.artists\n        .map(artist => artist.name)\n        .join(\", \");\n      const playing = !state.paused;\n      this.setState({\n        position,\n        duration,\n        trackName,\n        albumName,\n        artistName,\n        playing\n      });\n    }\n  }\n\n  transferPlaybackHere() {\n    //Probably should update this with axios later\n    const { deviceId, token } = this.state;\n    fetch(\"https://api.spotify.com/v1/me/player\", {\n      method: \"PUT\",\n      headers: {\n        authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        \"device_ids\": [ deviceId ],\n        \"play\": true,\n      }),\n    });\n    }\n  render() {\n    const {\n      token,\n      loggedIn,\n      artistName,\n      trackName,\n      albumName,\n      error,\n      position,\n      duration,\n      playing,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h2>Now Playing</h2>\n          <p>A Spotify Web Playback API Demo.</p>\n\n        {error && <p>Error: {error}</p>}\n\n        {loggedIn ?\n        (<div>\n          <SearchComponent/>\n          <p>Artist: {artistName}</p>\n          <p>Track: {trackName}</p>\n          <p>Album: {albumName}</p>\n          <ControlsComponent playing={playing} player={this.player}/>\n        </div>)\n        :\n        (<div>\n          <p>\n            <LoginComponent />\n\n            <input type=\"text\" value={token} onChange={e => this.setState({ token: e.target.value })} />\n          </p>\n        </div>)\n        }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}