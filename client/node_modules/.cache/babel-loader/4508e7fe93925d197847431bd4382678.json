{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Projects/playlist-app/client/src/components/AuthComponent.js\";\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport axios from 'axios';\nimport actions from '../redux/actions';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nconst queryString = require('querystring');\n\nclass AuthComponent extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    const parsed = queryString.parse(this.props.location.search.replace(/^\\?/, ''));\n    const code = parsed.code;\n    const self = this;\n    axios.get('/spotify/config', {\n      params: {\n        code: code,\n        state: 'needToDoThis' //This is explained further on the server side\n\n      }\n    }).then(response => {\n      const access_token = response.data.access_token;\n      const refresh_token = response.data.refresh_token; //Here is where we need to dispatch the action to Redux to set the token in the store\n\n      this.props.actions.storeAccessToken(access_token); //We need to save the refresh token and create users in a DB here eventuallt\n    }).catch(function (error) {\n      console.log('Error: ' + error);\n    });\n  }\n\n  render() {\n    if (!this.state.ready) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(Redirect, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return state;\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(actions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthComponent);","map":{"version":3,"sources":["/Users/mike/Projects/playlist-app/client/src/components/AuthComponent.js"],"names":["React","Component","Redirect","axios","actions","connect","bindActionCreators","queryString","require","AuthComponent","constructor","props","componentDidMount","parsed","parse","location","search","replace","code","self","get","params","state","then","response","access_token","data","refresh_token","storeAccessToken","catch","error","console","log","render","ready","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;;AAEA,MAAMC,WAAW,GAAGC,OAAO,CAAC,aAAD,CAA3B;;AAGA,MAAMC,aAAN,SAA4BR,SAA5B,CAAsC;AACpCS,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACD;;AACDC,EAAAA,iBAAiB,GAAE;AACjB,UAAMC,MAAM,GAAGN,WAAW,CAACO,KAAZ,CAAkB,KAAKH,KAAL,CAAWI,QAAX,CAAoBC,MAApB,CAA2BC,OAA3B,CAAmC,KAAnC,EAA0C,EAA1C,CAAlB,CAAf;AACA,UAAMC,IAAI,GAAGL,MAAM,CAACK,IAApB;AACA,UAAMC,IAAI,GAAG,IAAb;AACAhB,IAAAA,KAAK,CAACiB,GAAN,CAAU,iBAAV,EAA6B;AAC7BC,MAAAA,MAAM,EAAE;AACJH,QAAAA,IAAI,EAAEA,IADF;AAEJI,QAAAA,KAAK,EAAE,cAFH,CAEkB;;AAFlB;AADqB,KAA7B,EAMCC,IAND,CAMOC,QAAD,IAAc;AAClB,YAAMC,YAAY,GAAGD,QAAQ,CAACE,IAAT,CAAcD,YAAnC;AACA,YAAME,aAAa,GAAGH,QAAQ,CAACE,IAAT,CAAcC,aAApC,CAFkB,CAGlB;;AACA,WAAKhB,KAAL,CAAWP,OAAX,CAAmBwB,gBAAnB,CAAoCH,YAApC,EAJkB,CAKlB;AACD,KAZD,EAaCI,KAbD,CAaO,UAAUC,KAAV,EAAiB;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAYF,KAAxB;AACD,KAfD;AAgBD;;AAEDG,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKX,KAAL,CAAWY,KAAhB,EAAuB;AACrB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AACD,WAAO,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AA/BmC;;AAkCtC,SAASC,eAAT,CAAyBb,KAAzB,EAA+B;AAC7B,SAAOA,KAAP;AACD;;AAED,SAASc,kBAAT,CAA4BC,QAA5B,EAAqC;AACnC,SAAO;AACLjC,IAAAA,OAAO,EAAEE,kBAAkB,CAACF,OAAD,EAAUiC,QAAV;AADtB,GAAP;AAGD;;AAED,eAAehC,OAAO,CAAC8B,eAAD,EAAkBC,kBAAlB,CAAP,CAA6C3B,aAA7C,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom';\n\nimport axios from 'axios'\n\nimport actions from '../redux/actions';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nconst queryString = require('querystring');\n\n\nclass AuthComponent extends Component {\n  constructor(props){\n    super(props);\n  }\n  componentDidMount(){\n    const parsed = queryString.parse(this.props.location.search.replace(/^\\?/, ''));\n    const code = parsed.code\n    const self = this\n    axios.get('/spotify/config', {\n    params: {\n        code: code,\n        state: 'needToDoThis' //This is explained further on the server side\n      }\n    })\n    .then((response) => {\n      const access_token = response.data.access_token;\n      const refresh_token = response.data.refresh_token;\n      //Here is where we need to dispatch the action to Redux to set the token in the store\n      this.props.actions.storeAccessToken(access_token)\n      //We need to save the refresh token and create users in a DB here eventuallt\n    })\n    .catch(function (error) {\n      console.log('Error: ' + error);\n    });\n  }\n\n  render() {\n    if (!this.state.ready) {\n      return <div />\n    }\n    return <Redirect to=\"/\" />\n  }\n}\n\nfunction mapStateToProps(state){\n  return state\n}\n\nfunction mapDispatchToProps(dispatch){\n  return {\n    actions: bindActionCreators(actions, dispatch)\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthComponent)\n"]},"metadata":{},"sourceType":"module"}