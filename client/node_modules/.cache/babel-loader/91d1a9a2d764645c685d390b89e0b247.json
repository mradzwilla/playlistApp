{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Projects/playlist-app/client/src/App.js\";\n//This really should be moved into the compnents folder at some point\nimport React from 'react';\nimport { Redirect } from 'react-router-dom'; // import SearchComponent from './components/SearchComponent'\n// import ControlsComponent from './components/ControlsComponent'\n\nimport PlayerComponent from './components/ControlsComponent';\nimport axios from 'axios';\nimport './App.css';\nimport actions from './redux/actions';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nconst queryString = require('querystring'); //This component will check to make sure there is a valid access token for the player and, if so, render the player\n//If there is an arrow it will return to the Login screen\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // token: \"\",\n      deviceId: \"\",\n      loggedIn: false,\n      error: \"\" // trackName: \"Track Name\",\n      // artistName: \"Artist Name\",\n      // albumName: \"Album Name\",\n      // playing: false,\n      // position: 0,\n      // duration: 0,\n\n    };\n  }\n\n  componentDidMount() {\n    console.log(this.props.accessToken);\n    this.loadPlayer(this.props.accessToken);\n    let t = spotifyApi.setAccessToken(this.props.accessToken);\n  }\n\n  handleLogin() {// if (this.state.token !== \"\") {\n    //  this.setState({ loggedIn: true });\n    //   // check every second for the player.\n    //   // this.playerCheckInterval = setInterval(() => this.checkForPlayer(), 1000);\n    // }\n  }\n\n  async waitForSpotifyWebPlaybackSDKToLoad() {\n    return new Promise(resolve => {\n      if (window.Spotify) {\n        resolve(window.Spotify);\n      } else {\n        window.onSpotifyWebPlaybackSDKReady = () => {\n          resolve(window.Spotify);\n        };\n      }\n    });\n  }\n\n  loadPlayer(token) {\n    (async () => {\n      const _ref = await this.waitForSpotifyWebPlaybackSDKToLoad(),\n            Player = _ref.Player;\n\n      const sdk = new Player({\n        name: \"Mike's Test Spotify Player\",\n        getOAuthToken: cb => {\n          cb(token);\n        }\n      });\n      this.createEventHandlers(sdk, token);\n      let connected = await sdk.connect();\n\n      if (connected) {\n        let state = await sdk.getCurrentState();\n      }\n    })();\n  }\n\n  createEventHandlers(player, token) {\n    player.on('initialization_error', e => {\n      console.error(e);\n    });\n    player.on('authentication_error', e => {\n      console.error(e);\n      this.setState({\n        loggedIn: false\n      });\n    });\n    player.on('account_error', e => {\n      console.error(e);\n    });\n    player.on('playback_error', e => {\n      console.error(e);\n    }); // Playback status updates\n\n    player.on('player_state_changed', state => this.onStateChanged(state)); // Ready\n\n    player.on('ready', async data => {\n      let device_id = data.device_id;\n      console.log('ready', device_id);\n      console.log(\"Let the music play on!\");\n      await this.setState({\n        deviceId: device_id\n      });\n      this.transferPlaybackHere(device_id, token); // this.player.connect();\n    });\n  }\n\n  onStateChanged(state) {\n    // if we're no longer listening to music, we'll get a null state.\n    if (state !== null) {\n      const _state$track_window = state.track_window,\n            currentTrack = _state$track_window.current_track,\n            position = _state$track_window.position,\n            duration = _state$track_window.duration;\n      const trackName = currentTrack.name;\n      const albumName = currentTrack.album.name;\n      const artistName = currentTrack.artists.map(artist => artist.name).join(\", \");\n      const playing = !state.paused;\n      this.setState({\n        position,\n        duration,\n        trackName,\n        albumName,\n        artistName,\n        playing\n      });\n    }\n  }\n\n  transferPlaybackHere(deviceId, token) {\n    //Probably should update this with axios later\n    fetch(\"https://api.spotify.com/v1/me/player\", {\n      method: \"PUT\",\n      headers: {\n        authorization: \"Bearer \".concat(token),\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"device_ids\": [deviceId],\n        \"play\": true\n      })\n    });\n  }\n\n  render() {\n    if (this.props.accessToken) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"Access code: \", this.props.accessToken);\n    } else {\n      return React.createElement(Redirect, {\n        to: \"/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      });\n    }\n  } // render() {\n  //   const {\n  //     token,\n  //     loggedIn,\n  //     artistName,\n  //     trackName,\n  //     albumName,\n  //     error,\n  //     position,\n  //     duration,\n  //     playing,\n  //   } = this.state;\n  //\n  //   return (\n  //     <div className=\"App\">\n  //       <div className=\"App-header\">\n  //         <h2>Now Playing</h2>\n  //         <p>A Spotify Web Playback API Demo.</p>\n  //\n  //       {error && <p>Error: {error}</p>}\n  //\n  //       {loggedIn ?\n  //       (<div>\n  //         <SearchComponent/>\n  //         <p>Artist: {artistName}</p>\n  //         <p>Track: {trackName}</p>\n  //         <p>Album: {albumName}</p>\n  //         <ControlsComponent playing={playing} player={this.player}/>\n  //       </div>)\n  //       :\n  //       (<div>\n  //         <p>\n  //           <LoginComponent />\n  //           {token}\n  //         </p>\n  //       </div>)\n  //       }\n  //       <div>Access code: {this.props.accessToken}</div>\n  //       </div>\n  //     </div>\n  //   );\n  // }\n\n\n}\n\nfunction mapStateToProps(state) {\n  return state;\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(actions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/mike/Projects/playlist-app/client/src/App.js"],"names":["React","Redirect","PlayerComponent","axios","actions","connect","bindActionCreators","SpotifyWebApi","spotifyApi","queryString","require","App","Component","constructor","props","state","deviceId","loggedIn","error","componentDidMount","console","log","accessToken","loadPlayer","t","setAccessToken","handleLogin","waitForSpotifyWebPlaybackSDKToLoad","Promise","resolve","window","Spotify","onSpotifyWebPlaybackSDKReady","token","Player","sdk","name","getOAuthToken","cb","createEventHandlers","connected","getCurrentState","player","on","e","setState","onStateChanged","data","device_id","transferPlaybackHere","track_window","currentTrack","current_track","position","duration","trackName","albumName","album","artistName","artists","map","artist","join","playing","paused","fetch","method","headers","authorization","body","JSON","stringify","render","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["//This really should be moved into the compnents folder at some point\n\nimport React from 'react';\nimport { Redirect } from 'react-router-dom';\n\n// import SearchComponent from './components/SearchComponent'\n// import ControlsComponent from './components/ControlsComponent'\nimport PlayerComponent from './components/ControlsComponent'\n\nimport axios from 'axios';\nimport './App.css';\n\nimport actions from './redux/actions';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nconst queryString = require('querystring');\n\n//This component will check to make sure there is a valid access token for the player and, if so, render the player\n//If there is an arrow it will return to the Login screen\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // token: \"\",\n      deviceId: \"\",\n      loggedIn: false,\n      error: \"\",\n      // trackName: \"Track Name\",\n      // artistName: \"Artist Name\",\n      // albumName: \"Album Name\",\n      // playing: false,\n      // position: 0,\n      // duration: 0,\n    };\n  }\n  componentDidMount() {\n    console.log(this.props.accessToken)\n    this.loadPlayer(this.props.accessToken);\n    let t = spotifyApi.setAccessToken(this.props.accessToken);\n  }\n\n  handleLogin() {\n    // if (this.state.token !== \"\") {\n    //  this.setState({ loggedIn: true });\n    //   // check every second for the player.\n    //   // this.playerCheckInterval = setInterval(() => this.checkForPlayer(), 1000);\n    // }\n  }\n  async waitForSpotifyWebPlaybackSDKToLoad () {\n    return new Promise(resolve => {\n      if (window.Spotify) {\n        resolve(window.Spotify);\n      } else {\n        window.onSpotifyWebPlaybackSDKReady = () => {\n          resolve(window.Spotify);\n        };\n      }\n    });\n  };\n\n  loadPlayer(token){\n    (async () => {\n      const { Player } = await this.waitForSpotifyWebPlaybackSDKToLoad();\n      const sdk = new Player({\n        name: \"Mike's Test Spotify Player\",\n        getOAuthToken: cb => { cb(token); },\n      });\n      this.createEventHandlers(sdk, token);\n      let connected = await sdk.connect();\n      if (connected) {\n        let state = await sdk.getCurrentState();\n      }\n    })();\n  }\n\n  createEventHandlers(player, token) {\n    player.on('initialization_error', e => { console.error(e); });\n    player.on('authentication_error', e => {\n      console.error(e);\n      this.setState({ loggedIn: false });\n    });\n    player.on('account_error', e => { console.error(e); });\n    player.on('playback_error', e => { console.error(e); });\n\n    // Playback status updates\n    player.on('player_state_changed', state => this.onStateChanged(state));\n\n    // Ready\n    player.on('ready', async data => {\n      let { device_id } = data;\n      console.log('ready', device_id)\n      console.log(\"Let the music play on!\");\n      await this.setState({ deviceId: device_id });\n      this.transferPlaybackHere(device_id, token);\n      // this.player.connect();\n    });\n  }\n  onStateChanged(state) {\n    // if we're no longer listening to music, we'll get a null state.\n    if (state !== null) {\n      const {\n        current_track: currentTrack,\n        position,\n        duration,\n      } = state.track_window;\n      const trackName = currentTrack.name;\n      const albumName = currentTrack.album.name;\n      const artistName = currentTrack.artists\n        .map(artist => artist.name)\n        .join(\", \");\n      const playing = !state.paused;\n      this.setState({\n        position,\n        duration,\n        trackName,\n        albumName,\n        artistName,\n        playing\n      });\n    }\n  }\n\n  transferPlaybackHere(deviceId, token) {\n    //Probably should update this with axios later\n    fetch(\"https://api.spotify.com/v1/me/player\", {\n      method: \"PUT\",\n      headers: {\n        authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        \"device_ids\": [ deviceId ],\n        \"play\": true,\n      }),\n    });\n  }\n  render(){\n    if (this.props.accessToken){\n      return <div>Access code: {this.props.accessToken}</div>\n    } else {\n      return <Redirect to=\"/login\" />\n    }\n  }\n  // render() {\n  //   const {\n  //     token,\n  //     loggedIn,\n  //     artistName,\n  //     trackName,\n  //     albumName,\n  //     error,\n  //     position,\n  //     duration,\n  //     playing,\n  //   } = this.state;\n  //\n  //   return (\n  //     <div className=\"App\">\n  //       <div className=\"App-header\">\n  //         <h2>Now Playing</h2>\n  //         <p>A Spotify Web Playback API Demo.</p>\n  //\n  //       {error && <p>Error: {error}</p>}\n  //\n  //       {loggedIn ?\n  //       (<div>\n  //         <SearchComponent/>\n  //         <p>Artist: {artistName}</p>\n  //         <p>Track: {trackName}</p>\n  //         <p>Album: {albumName}</p>\n  //         <ControlsComponent playing={playing} player={this.player}/>\n  //       </div>)\n  //       :\n  //       (<div>\n  //         <p>\n  //           <LoginComponent />\n  //           {token}\n  //         </p>\n  //       </div>)\n  //       }\n  //       <div>Access code: {this.props.accessToken}</div>\n  //       </div>\n  //     </div>\n  //   );\n  // }\n}\n\nfunction mapStateToProps(state){\n  return state\n}\n\nfunction mapDispatchToProps(dispatch){\n  return {\n    actions: bindActionCreators(actions, dispatch)\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n"]},"metadata":{},"sourceType":"module"}