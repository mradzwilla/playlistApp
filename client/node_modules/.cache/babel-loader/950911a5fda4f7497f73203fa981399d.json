{"ast":null,"code":"import React, { Component } from 'react';\nimport axios from 'axios';\n\nconst queryString = require('querystring');\n\nclass AuthComponent extends Component {\n  componentDidMount() {\n    const parsed = queryString.parse(this.props.location.search.replace(/^\\?/, ''));\n    const code = parsed.code;\n    console.log(code); //Our condition here should check if there is a token in the store and if it's valid\n    //If it isn't, call the backend server to get a new one. Else continue\n\n    const self = this;\n    axios.get('/spotify/config', {\n      params: {\n        code: code,\n        state: 'needToDoThis' //This is explained further on the server side\n\n      }\n    }).then(response => {\n      //Need to build some error handling here\n      const access_token = response.data.access_token;\n      const refresh_token = response.data.refresh_token;\n      console.log('New token is:' + access_token); //Here is where we need to dispatch the action to Redux to set the token in the store\n\n      this.props.actions.storeAccessToken(access_token); //Need to dispatch action to login here too\n      //After doing this, all additional logic should be moved somewhere else\n    }).catch(function (error) {\n      console.log('Error: ' + error);\n    });\n  }\n\n  render() {\n    var display;\n\n    if (this.state.complete) {\n      display = 'Loader';\n    } else {\n      display = 'Route redirect';\n    }\n\n    return {\n      display //Will be redirect\n\n    };\n  }\n\n}\n\nexport default AuthComponent;","map":{"version":3,"sources":["/Users/mike/Projects/playlist-app/client/src/components/AuthComponent.js"],"names":["React","Component","axios","queryString","require","AuthComponent","componentDidMount","parsed","parse","props","location","search","replace","code","console","log","self","get","params","state","then","response","access_token","data","refresh_token","actions","storeAccessToken","catch","error","render","display","complete"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAW,GAAGC,OAAO,CAAC,aAAD,CAA3B;;AAGA,MAAMC,aAAN,SAA4BJ,SAA5B,CAAsC;AAEpCK,EAAAA,iBAAiB,GAAE;AACjB,UAAMC,MAAM,GAAGJ,WAAW,CAACK,KAAZ,CAAkB,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,MAApB,CAA2BC,OAA3B,CAAmC,KAAnC,EAA0C,EAA1C,CAAlB,CAAf;AACA,UAAMC,IAAI,GAAGN,MAAM,CAACM,IAApB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EAHiB,CAIjB;AACA;;AACA,UAAMG,IAAI,GAAG,IAAb;AACAd,IAAAA,KAAK,CAACe,GAAN,CAAU,iBAAV,EAA6B;AAC7BC,MAAAA,MAAM,EAAE;AACJL,QAAAA,IAAI,EAAEA,IADF;AAEJM,QAAAA,KAAK,EAAE,cAFH,CAEkB;;AAFlB;AADqB,KAA7B,EAMCC,IAND,CAMOC,QAAD,IAAc;AAClB;AACA,YAAMC,YAAY,GAAGD,QAAQ,CAACE,IAAT,CAAcD,YAAnC;AACA,YAAME,aAAa,GAAGH,QAAQ,CAACE,IAAT,CAAcC,aAApC;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAgBO,YAA5B,EAJkB,CAKlB;;AACA,WAAKb,KAAL,CAAWgB,OAAX,CAAmBC,gBAAnB,CAAoCJ,YAApC,EANkB,CAOlB;AACA;AACD,KAfD,EAgBCK,KAhBD,CAgBO,UAAUC,KAAV,EAAiB;AACtBd,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAYa,KAAxB;AACD,KAlBD;AAmBD;;AAEDC,EAAAA,MAAM,GAAG;AACP,QAAIC,OAAJ;;AACA,QAAI,KAAKX,KAAL,CAAWY,QAAf,EAAyB;AACvBD,MAAAA,OAAO,GAAG,QAAV;AACD,KAFD,MAEO;AACLA,MAAAA,OAAO,GAAG,gBAAV;AACD;;AACD,WACE;AAACA,MAAAA,OAAD,CACA;;AADA,KADF;AAKD;;AA1CmC;;AA6CtC,eAAezB,aAAf","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios'\n\nconst queryString = require('querystring');\n\n\nclass AuthComponent extends Component {\n\n  componentDidMount(){\n    const parsed = queryString.parse(this.props.location.search.replace(/^\\?/, ''));\n    const code = parsed.code\n    console.log(code)\n    //Our condition here should check if there is a token in the store and if it's valid\n    //If it isn't, call the backend server to get a new one. Else continue\n    const self = this\n    axios.get('/spotify/config', {\n    params: {\n        code: code,\n        state: 'needToDoThis' //This is explained further on the server side\n      }\n    })\n    .then((response) => {\n      //Need to build some error handling here\n      const access_token = response.data.access_token;\n      const refresh_token = response.data.refresh_token;\n      console.log('New token is:'+access_token)\n      //Here is where we need to dispatch the action to Redux to set the token in the store\n      this.props.actions.storeAccessToken(access_token)\n      //Need to dispatch action to login here too\n      //After doing this, all additional logic should be moved somewhere else\n    })\n    .catch(function (error) {\n      console.log('Error: ' + error);\n    });\n  }\n\n  render() {\n    var display;\n    if (this.state.complete) {\n      display = 'Loader';\n    } else {\n      display = 'Route redirect';\n    }\n    return (\n      {display}\n      //Will be redirect\n\n    )\n  }\n}\n\nexport default AuthComponent\n"]},"metadata":{},"sourceType":"module"}