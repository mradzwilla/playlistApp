{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Projects/playlist-app/client/src/App.js\";\nimport React from 'react';\nimport SearchComponent from './components/SearchComponent';\nimport ControlsComponent from './components/ControlsComponent';\nimport LoginComponent from './components/LoginComponent';\nimport axios from 'axios';\nimport './App.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nconst queryString = require('querystring');\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      token: \"\",\n      deviceId: \"\",\n      loggedIn: false,\n      error: \"\",\n      trackName: \"Track Name\",\n      artistName: \"Artist Name\",\n      albumName: \"Album Name\",\n      playing: false,\n      position: 0,\n      duration: 0\n    };\n    this.playerCheckInterval = null; //this.checkForPlayer = this.checkForPlayer.bind(this)\n  }\n\n  componentDidMount() {\n    const parsed = queryString.parse(this.props.location.search.replace(/^\\?/, ''));\n    const code = parsed.code;\n    const self = this;\n    axios.get('/spotify/config', {\n      params: {\n        code: code,\n        state: 'needToDoThis' //I don't remember what I was referring to here but it has something to do with session management\n\n      }\n    }).then(response => {\n      //Need to build some error handling here\n      const access_token = response.data.access_token;\n      const refresh_token = response.data.refresh_token;\n      console.log(response);\n      this.loadPlayer(access_token); //this.checkForPlayer(access_token);\n\n      this.setState({\n        token: access_token\n      });\n      spotifyApi.setAccessToken(access_token);\n      spotifyApi.getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE', function (err, data) {\n        if (err) console.error(err);else console.log('Artist albums', data);\n      });\n    }).catch(function (error) {\n      console.log('Error: ' + error);\n    });\n  }\n\n  handleLogin() {\n    if (this.state.token !== \"\") {\n      this.setState({\n        loggedIn: true\n      }); // check every second for the player.\n      // this.playerCheckInterval = setInterval(() => this.checkForPlayer(), 1000);\n    }\n  }\n\n  async waitForSpotifyWebPlaybackSDKToLoad() {\n    console.log('waiting for a track to explode on');\n    return new Promise(resolve => {\n      if (window.Spotify) {\n        resolve(window.Spotify);\n        this.createEventHandlers();\n      } else {\n        window.onSpotifyWebPlaybackSDKReady = () => {\n          resolve(window.Spotify);\n          this.createEventHandlers();\n        };\n      }\n    });\n  }\n\n  loadPlayer(token) {\n    (async () => {\n      const _ref = await this.waitForSpotifyWebPlaybackSDKToLoad(),\n            player = _ref.player;\n\n      console.log(\"The Web Playback SDK has loaded.\");\n      this.player = new window.Spotify.Player({\n        name: \"Mike's Spotify Player\",\n        getOAuthToken: cb => {\n          cb(token);\n        }\n      });\n      this.createEventHandlers();\n    })();\n  } // checkForPlayer(token) {\n  //   //const { token } = this.state;\n  //   const tokenTest = token;\n  //   if (typeof(window.Spotify) !== 'undefined') {\n  //     // cancel the interval\n  //     clearInterval(this.playerCheckInterval);\n  //     console.log(window.Spotify)\n  //     this.player = new window.Spotify.Player({\n  //       name: \"Mike's Spotify Player\",\n  //       getOAuthToken: cb => { cb(token); },\n  //     });\n  //     this.createEventHandlers();\n  //\n  //     // finally, connect!\n  //     this.player.connect();\n  //   }\n  // }\n\n\n  createEventHandlers() {\n    console.log('createEventHandlers');\n    this.player.on('initialization_error', e => {\n      console.error(e);\n    });\n    this.player.on('authentication_error', e => {\n      console.error(e);\n      this.setState({\n        loggedIn: false\n      });\n    });\n    this.player.on('account_error', e => {\n      console.error(e);\n    });\n    this.player.on('playback_error', e => {\n      console.error(e);\n    }); // Playback status updates\n\n    this.player.on('player_state_changed', state => this.onStateChanged(state)); // Ready\n\n    this.player.on('ready', async data => {\n      let device_id = data.device_id;\n      console.log('ready', device_id);\n      console.log(\"Let the music play on!\");\n      await this.setState({\n        deviceId: device_id\n      });\n      this.transferPlaybackHere();\n    });\n  }\n\n  onStateChanged(state) {\n    // if we're no longer listening to music, we'll get a null state.\n    if (state !== null) {\n      const _state$track_window = state.track_window,\n            currentTrack = _state$track_window.current_track,\n            position = _state$track_window.position,\n            duration = _state$track_window.duration;\n      const trackName = currentTrack.name;\n      const albumName = currentTrack.album.name;\n      const artistName = currentTrack.artists.map(artist => artist.name).join(\", \");\n      const playing = !state.paused;\n      this.setState({\n        position,\n        duration,\n        trackName,\n        albumName,\n        artistName,\n        playing\n      });\n    }\n  }\n\n  transferPlaybackHere() {\n    //Probably should update this with axios later\n    const _this$state = this.state,\n          deviceId = _this$state.deviceId,\n          token = _this$state.token;\n    fetch(\"https://api.spotify.com/v1/me/player\", {\n      method: \"PUT\",\n      headers: {\n        authorization: \"Bearer \".concat(token),\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"device_ids\": [deviceId],\n        \"play\": true\n      })\n    });\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          token = _this$state2.token,\n          loggedIn = _this$state2.loggedIn,\n          artistName = _this$state2.artistName,\n          trackName = _this$state2.trackName,\n          albumName = _this$state2.albumName,\n          error = _this$state2.error,\n          position = _this$state2.position,\n          duration = _this$state2.duration,\n          playing = _this$state2.playing;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"Now Playing\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"A Spotify Web Playback API Demo.\"), error && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"Error: \", error), loggedIn ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(SearchComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"Artist: \", artistName), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"Track: \", trackName), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"Album: \", albumName), React.createElement(ControlsComponent, {\n      playing: playing,\n      player: this.player,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(LoginComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), token))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/mike/Projects/playlist-app/client/src/App.js"],"names":["React","SearchComponent","ControlsComponent","LoginComponent","axios","SpotifyWebApi","spotifyApi","queryString","require","App","Component","constructor","props","state","token","deviceId","loggedIn","error","trackName","artistName","albumName","playing","position","duration","playerCheckInterval","componentDidMount","parsed","parse","location","search","replace","code","self","get","params","then","response","access_token","data","refresh_token","console","log","loadPlayer","setState","setAccessToken","getArtistAlbums","err","catch","handleLogin","waitForSpotifyWebPlaybackSDKToLoad","Promise","resolve","window","Spotify","createEventHandlers","onSpotifyWebPlaybackSDKReady","player","Player","name","getOAuthToken","cb","on","e","onStateChanged","device_id","transferPlaybackHere","track_window","currentTrack","current_track","album","artists","map","artist","join","paused","fetch","method","headers","authorization","body","JSON","stringify","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SearchComponent from './components/SearchComponent'\nimport ControlsComponent from './components/ControlsComponent'\nimport LoginComponent from './components/LoginComponent'\nimport axios from 'axios';\nimport './App.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nconst queryString = require('querystring');\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      token: \"\",\n      deviceId: \"\",\n      loggedIn: false,\n      error: \"\",\n      trackName: \"Track Name\",\n      artistName: \"Artist Name\",\n      albumName: \"Album Name\",\n      playing: false,\n      position: 0,\n      duration: 0,\n    };\n    this.playerCheckInterval = null;\n    //this.checkForPlayer = this.checkForPlayer.bind(this)\n  }\n  componentDidMount() {\n    const parsed = queryString.parse(this.props.location.search.replace(/^\\?/, ''));\n    const code = parsed.code\n    const self = this\n    axios.get('/spotify/config', {\n    params: {\n        code: code,\n        state: 'needToDoThis' //I don't remember what I was referring to here but it has something to do with session management\n      }\n    })\n    .then((response) => {\n      //Need to build some error handling here\n      const access_token = response.data.access_token;\n      const refresh_token = response.data.refresh_token;\n      console.log(response)\n      this.loadPlayer(access_token);\n      //this.checkForPlayer(access_token);\n      this.setState({\n        token: access_token       });\n      spotifyApi.setAccessToken(access_token);\n      spotifyApi.getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE', function(err, data) {\n        if (err) console.error(err);\n        else console.log('Artist albums', data);\n      });\n\n    })\n    .catch(function (error) {\n      console.log('Error: ' + error);\n    });\n\n  }\n  handleLogin() {\n    if (this.state.token !== \"\") {\n      this.setState({ loggedIn: true });\n      // check every second for the player.\n      // this.playerCheckInterval = setInterval(() => this.checkForPlayer(), 1000);\n    }\n  }\n  async waitForSpotifyWebPlaybackSDKToLoad () {\n    console.log('waiting for a track to explode on')\n    return new Promise(resolve => {\n      if (window.Spotify) {\n        resolve(window.Spotify);\n        this.createEventHandlers();\n\n      } else {\n        window.onSpotifyWebPlaybackSDKReady = () => {\n          resolve(window.Spotify);\n          this.createEventHandlers();\n\n        };\n      }\n    });\n  };\n\n  loadPlayer(token){\n    (async () => {\n      const { player } = await this.waitForSpotifyWebPlaybackSDKToLoad();\n      console.log(\"The Web Playback SDK has loaded.\");\n      this.player = new window.Spotify.Player({\n        name: \"Mike's Spotify Player\",\n        getOAuthToken: cb => { cb(token); },\n      });\n      this.createEventHandlers();\n    })();\n  }\n  // checkForPlayer(token) {\n  //   //const { token } = this.state;\n  //   const tokenTest = token;\n  //   if (typeof(window.Spotify) !== 'undefined') {\n  //     // cancel the interval\n  //     clearInterval(this.playerCheckInterval);\n  //     console.log(window.Spotify)\n  //     this.player = new window.Spotify.Player({\n  //       name: \"Mike's Spotify Player\",\n  //       getOAuthToken: cb => { cb(token); },\n  //     });\n  //     this.createEventHandlers();\n  //\n  //     // finally, connect!\n  //     this.player.connect();\n  //   }\n  // }\n  createEventHandlers() {\n    console.log('createEventHandlers')\n    this.player.on('initialization_error', e => { console.error(e); });\n    this.player.on('authentication_error', e => {\n      console.error(e);\n      this.setState({ loggedIn: false });\n    });\n    this.player.on('account_error', e => { console.error(e); });\n    this.player.on('playback_error', e => { console.error(e); });\n\n    // Playback status updates\n    this.player.on('player_state_changed', state => this.onStateChanged(state));\n\n    // Ready\n    this.player.on('ready', async data => {\n      let { device_id } = data;\n      console.log('ready', device_id)\n      console.log(\"Let the music play on!\");\n      await this.setState({ deviceId: device_id });\n      this.transferPlaybackHere();\n    });\n\n  }\n  onStateChanged(state) {\n    // if we're no longer listening to music, we'll get a null state.\n    if (state !== null) {\n      const {\n        current_track: currentTrack,\n        position,\n        duration,\n      } = state.track_window;\n      const trackName = currentTrack.name;\n      const albumName = currentTrack.album.name;\n      const artistName = currentTrack.artists\n        .map(artist => artist.name)\n        .join(\", \");\n      const playing = !state.paused;\n      this.setState({\n        position,\n        duration,\n        trackName,\n        albumName,\n        artistName,\n        playing\n      });\n    }\n  }\n\n  transferPlaybackHere() {\n    //Probably should update this with axios later\n    const { deviceId, token } = this.state;\n    fetch(\"https://api.spotify.com/v1/me/player\", {\n      method: \"PUT\",\n      headers: {\n        authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        \"device_ids\": [ deviceId ],\n        \"play\": true,\n      }),\n    });\n  }\n  render() {\n    const {\n      token,\n      loggedIn,\n      artistName,\n      trackName,\n      albumName,\n      error,\n      position,\n      duration,\n      playing,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h2>Now Playing</h2>\n          <p>A Spotify Web Playback API Demo.</p>\n\n        {error && <p>Error: {error}</p>}\n\n        {loggedIn ?\n        (<div>\n          <SearchComponent/>\n          <p>Artist: {artistName}</p>\n          <p>Track: {trackName}</p>\n          <p>Album: {albumName}</p>\n          <ControlsComponent playing={playing} player={this.player}/>\n        </div>)\n        :\n        (<div>\n          <p>\n            <LoginComponent />\n            {token}\n          </p>\n        </div>)\n        }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}