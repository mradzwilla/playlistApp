{"ast":null,"code":"//Remember, reducers are functions that take previous state and return new state as a pure function\n//Do not mutate existing state\nlet authReducer = function (code = 1, action) {\n  switch (action.type) {\n    case 'EXAMPLE':\n      return code + 1;\n\n    default:\n      return code + 'test-code-appended';\n  }\n};\n\nexport default authReducer;","map":{"version":3,"sources":["/Users/mike/Projects/playlist-app/client/src/redux/reducers/authReducer.js"],"names":["authReducer","code","action","type"],"mappings":"AAAA;AACA;AAEA,IAAIA,WAAW,GAAG,UAASC,IAAI,GAAG,CAAhB,EAAmBC,MAAnB,EAA0B;AAC3C,UAAQA,MAAM,CAACC,IAAf;AACC,SAAK,SAAL;AACC,aAAOF,IAAI,GAAG,CAAd;;AACD;AACC,aAAOA,IAAI,GAAG,oBAAd;AAJF;AAMA,CAPD;;AASA,eAAeD,WAAf","sourcesContent":["//Remember, reducers are functions that take previous state and return new state as a pure function\n//Do not mutate existing state\n\nlet authReducer = function(code = 1, action){\n\tswitch (action.type){\n\t\tcase 'EXAMPLE':\n\t\t\treturn code + 1\n\t\tdefault:\n\t\t\treturn code + 'test-code-appended';\n\t}\n}\n\nexport default authReducer;\n"]},"metadata":{},"sourceType":"module"}