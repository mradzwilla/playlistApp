{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Projects/playlist-app/client/src/App.js\";\nimport React from 'react';\nimport SearchComponent from './components/SearchComponent';\nimport ControlsComponent from './components/ControlsComponent';\nimport LoginComponent from './components/LoginComponent';\nimport axios from 'axios';\nimport './App.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nconst queryString = require('querystring');\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      token: \"\",\n      deviceId: \"\",\n      loggedIn: false,\n      error: \"\",\n      trackName: \"Track Name\",\n      artistName: \"Artist Name\",\n      albumName: \"Album Name\",\n      playing: false,\n      position: 0,\n      duration: 0\n    };\n    this.playerCheckInterval = null;\n    this.checkForPlayer = this.checkForPlayer.bind(this);\n  }\n\n  componentDidMount() {\n    const parsed = queryString.parse(this.props.location.search.replace(/^\\?/, ''));\n    const code = parsed.code;\n    const self = this;\n    axios.get('/spotify/config', {\n      params: {\n        code: code,\n        state: 'needToDoThis' //I don't remember what I was referring to here but it has something to do with session management\n\n      }\n    }).then(response => {\n      //Need to build some error handling here\n      const access_token = response.data.access_token;\n      const refresh_token = response.data.refresh_token;\n      console.log(response);\n      this.waitForSpotifyWebPlaybackSDKToLoad; //this.checkForPlayer(access_token);\n\n      this.setState({\n        token: access_token\n      });\n      spotifyApi.setAccessToken(access_token);\n      spotifyApi.getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE', function (err, data) {\n        if (err) console.error(err);else console.log('Artist albums', data);\n      });\n    }).catch(function (error) {\n      console.log('Error: ' + error);\n    });\n  }\n\n  handleLogin() {\n    if (this.state.token !== \"\") {\n      this.setState({\n        loggedIn: true\n      }); // check every second for the player.\n      // this.playerCheckInterval = setInterval(() => this.checkForPlayer(), 1000);\n    }\n  }\n\n  async waitForSpotifyWebPlaybackSDKToLoad() {\n    return new Promise(resolve => {\n      if (window.Spotify) {\n        resolve(window.Spotify);\n      } else {\n        window.onSpotifyWebPlaybackSDKReady = () => {\n          resolve(window.Spotify);\n        };\n      }\n    });\n  }\n\n  loadPlayer() {\n    (async () => {\n      const _ref = await this.waitForSpotifyWebPlaybackSDKToLoad(),\n            Player = _ref.Player;\n\n      console.log(\"The Web Playback SDK has loaded.\");\n    })();\n  }\n\n  checkForPlayer(token) {\n    //const { token } = this.state;\n    const tokenTest = token;\n\n    if (typeof window.Spotify !== 'undefined') {\n      // cancel the interval\n      clearInterval(this.playerCheckInterval);\n      console.log(window.Spotify);\n      this.player = new window.Spotify.Player({\n        name: \"Mike's Spotify Player\",\n        getOAuthToken: cb => {\n          cb(token);\n        }\n      });\n      this.createEventHandlers(); // finally, connect!\n\n      this.player.connect();\n    }\n  }\n\n  createEventHandlers() {\n    this.player.on('initialization_error', e => {\n      console.error(e);\n    });\n    this.player.on('authentication_error', e => {\n      console.error(e);\n      this.setState({\n        loggedIn: false\n      });\n    });\n    this.player.on('account_error', e => {\n      console.error(e);\n    });\n    this.player.on('playback_error', e => {\n      console.error(e);\n    }); // Playback status updates\n\n    this.player.on('player_state_changed', state => this.onStateChanged(state)); // Ready\n\n    this.player.on('ready', async data => {\n      let device_id = data.device_id;\n      console.log(\"Let the music play on!\");\n      await this.setState({\n        deviceId: device_id\n      });\n      this.transferPlaybackHere();\n    });\n  }\n\n  onStateChanged(state) {\n    // if we're no longer listening to music, we'll get a null state.\n    if (state !== null) {\n      const _state$track_window = state.track_window,\n            currentTrack = _state$track_window.current_track,\n            position = _state$track_window.position,\n            duration = _state$track_window.duration;\n      const trackName = currentTrack.name;\n      const albumName = currentTrack.album.name;\n      const artistName = currentTrack.artists.map(artist => artist.name).join(\", \");\n      const playing = !state.paused;\n      this.setState({\n        position,\n        duration,\n        trackName,\n        albumName,\n        artistName,\n        playing\n      });\n    }\n  }\n\n  transferPlaybackHere() {\n    //Probably should update this with axios later\n    const _this$state = this.state,\n          deviceId = _this$state.deviceId,\n          token = _this$state.token;\n    fetch(\"https://api.spotify.com/v1/me/player\", {\n      method: \"PUT\",\n      headers: {\n        authorization: \"Bearer \".concat(token),\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"device_ids\": [deviceId],\n        \"play\": true\n      })\n    });\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          token = _this$state2.token,\n          loggedIn = _this$state2.loggedIn,\n          artistName = _this$state2.artistName,\n          trackName = _this$state2.trackName,\n          albumName = _this$state2.albumName,\n          error = _this$state2.error,\n          position = _this$state2.position,\n          duration = _this$state2.duration,\n          playing = _this$state2.playing;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"Now Playing\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"A Spotify Web Playback API Demo.\"), error && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"Error: \", error), loggedIn ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(SearchComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"Artist: \", artistName), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"Track: \", trackName), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Album: \", albumName), React.createElement(ControlsComponent, {\n      playing: playing,\n      player: this.player,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(LoginComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }), token))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/mike/Projects/playlist-app/client/src/App.js"],"names":["React","SearchComponent","ControlsComponent","LoginComponent","axios","SpotifyWebApi","spotifyApi","queryString","require","App","Component","constructor","props","state","token","deviceId","loggedIn","error","trackName","artistName","albumName","playing","position","duration","playerCheckInterval","checkForPlayer","bind","componentDidMount","parsed","parse","location","search","replace","code","self","get","params","then","response","access_token","data","refresh_token","console","log","waitForSpotifyWebPlaybackSDKToLoad","setState","setAccessToken","getArtistAlbums","err","catch","handleLogin","Promise","resolve","window","Spotify","onSpotifyWebPlaybackSDKReady","loadPlayer","Player","tokenTest","clearInterval","player","name","getOAuthToken","cb","createEventHandlers","connect","on","e","onStateChanged","device_id","transferPlaybackHere","track_window","currentTrack","current_track","album","artists","map","artist","join","paused","fetch","method","headers","authorization","body","JSON","stringify","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SearchComponent from './components/SearchComponent'\nimport ControlsComponent from './components/ControlsComponent'\nimport LoginComponent from './components/LoginComponent'\nimport axios from 'axios';\nimport './App.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nconst queryString = require('querystring');\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      token: \"\",\n      deviceId: \"\",\n      loggedIn: false,\n      error: \"\",\n      trackName: \"Track Name\",\n      artistName: \"Artist Name\",\n      albumName: \"Album Name\",\n      playing: false,\n      position: 0,\n      duration: 0,\n    };\n    this.playerCheckInterval = null;\n    this.checkForPlayer = this.checkForPlayer.bind(this)\n  }\n  componentDidMount() {\n    const parsed = queryString.parse(this.props.location.search.replace(/^\\?/, ''));\n    const code = parsed.code\n    const self = this\n    axios.get('/spotify/config', {\n    params: {\n        code: code,\n        state: 'needToDoThis' //I don't remember what I was referring to here but it has something to do with session management\n      }\n    })\n    .then((response) => {\n      //Need to build some error handling here\n      const access_token = response.data.access_token;\n      const refresh_token = response.data.refresh_token;\n      console.log(response)\n      this.waitForSpotifyWebPlaybackSDKToLoad\n      //this.checkForPlayer(access_token);\n      this.setState({\n        token: access_token       });\n      spotifyApi.setAccessToken(access_token);\n      spotifyApi.getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE', function(err, data) {\n        if (err) console.error(err);\n        else console.log('Artist albums', data);\n      });\n\n    })\n    .catch(function (error) {\n      console.log('Error: ' + error);\n    });\n\n  }\n  handleLogin() {\n    if (this.state.token !== \"\") {\n      this.setState({ loggedIn: true });\n      // check every second for the player.\n      // this.playerCheckInterval = setInterval(() => this.checkForPlayer(), 1000);\n    }\n  }\n  async waitForSpotifyWebPlaybackSDKToLoad () {\n    return new Promise(resolve => {\n      if (window.Spotify) {\n        resolve(window.Spotify);\n      } else {\n        window.onSpotifyWebPlaybackSDKReady = () => {\n          resolve(window.Spotify);\n        };\n      }\n    });\n  };\n  loadPlayer(){\n    (async () => {\n      const { Player } = await this.waitForSpotifyWebPlaybackSDKToLoad();\n      console.log(\"The Web Playback SDK has loaded.\");\n    })();\n\n  }\n  checkForPlayer(token) {\n    //const { token } = this.state;\n    const tokenTest = token;\n    if (typeof(window.Spotify) !== 'undefined') {\n      // cancel the interval\n      clearInterval(this.playerCheckInterval);\n      console.log(window.Spotify)\n      this.player = new window.Spotify.Player({\n        name: \"Mike's Spotify Player\",\n        getOAuthToken: cb => { cb(token); },\n      });\n      this.createEventHandlers();\n\n      // finally, connect!\n      this.player.connect();\n    }\n  }\n  createEventHandlers() {\n    this.player.on('initialization_error', e => { console.error(e); });\n    this.player.on('authentication_error', e => {\n      console.error(e);\n      this.setState({ loggedIn: false });\n    });\n    this.player.on('account_error', e => { console.error(e); });\n    this.player.on('playback_error', e => { console.error(e); });\n\n    // Playback status updates\n    this.player.on('player_state_changed', state => this.onStateChanged(state));\n\n    // Ready\n    this.player.on('ready', async data => {\n      let { device_id } = data;\n      console.log(\"Let the music play on!\");\n      await this.setState({ deviceId: device_id });\n      this.transferPlaybackHere();\n    });\n\n  }\n  onStateChanged(state) {\n    // if we're no longer listening to music, we'll get a null state.\n    if (state !== null) {\n      const {\n        current_track: currentTrack,\n        position,\n        duration,\n      } = state.track_window;\n      const trackName = currentTrack.name;\n      const albumName = currentTrack.album.name;\n      const artistName = currentTrack.artists\n        .map(artist => artist.name)\n        .join(\", \");\n      const playing = !state.paused;\n      this.setState({\n        position,\n        duration,\n        trackName,\n        albumName,\n        artistName,\n        playing\n      });\n    }\n  }\n\n  transferPlaybackHere() {\n    //Probably should update this with axios later\n    const { deviceId, token } = this.state;\n    fetch(\"https://api.spotify.com/v1/me/player\", {\n      method: \"PUT\",\n      headers: {\n        authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        \"device_ids\": [ deviceId ],\n        \"play\": true,\n      }),\n    });\n    }\n  render() {\n    const {\n      token,\n      loggedIn,\n      artistName,\n      trackName,\n      albumName,\n      error,\n      position,\n      duration,\n      playing,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h2>Now Playing</h2>\n          <p>A Spotify Web Playback API Demo.</p>\n\n        {error && <p>Error: {error}</p>}\n\n        {loggedIn ?\n        (<div>\n          <SearchComponent/>\n          <p>Artist: {artistName}</p>\n          <p>Track: {trackName}</p>\n          <p>Album: {albumName}</p>\n          <ControlsComponent playing={playing} player={this.player}/>\n        </div>)\n        :\n        (<div>\n          <p>\n            <LoginComponent />\n            {token}\n          </p>\n        </div>)\n        }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}