{"ast":null,"code":"//Remember, reducers are functions that take previous state and return new state as a pure function\n//Do not mutate existing state\nlet authReducer = function (code = \"\", action) {\n  switch (action.type) {\n    case 'SET_ACCESS_TOKEN':\n      return action.payload['code'];\n\n    default:\n      return action.type;\n  }\n};\n\nexport default authReducer;","map":{"version":3,"sources":["/Users/mike/Projects/playlist-app/client/src/redux/reducers/authReducer.js"],"names":["authReducer","code","action","type","payload"],"mappings":"AAAA;AACA;AAEA,IAAIA,WAAW,GAAG,UAASC,IAAI,GAAG,EAAhB,EAAoBC,MAApB,EAA2B;AAC5C,UAAQA,MAAM,CAACC,IAAf;AACC,SAAK,kBAAL;AACC,aAAOD,MAAM,CAACE,OAAP,CAAe,MAAf,CAAP;;AACD;AACC,aAAOF,MAAM,CAACC,IAAd;AAJF;AAMA,CAPD;;AASA,eAAeH,WAAf","sourcesContent":["//Remember, reducers are functions that take previous state and return new state as a pure function\n//Do not mutate existing state\n\nlet authReducer = function(code = \"\", action){\n\tswitch (action.type){\n\t\tcase 'SET_ACCESS_TOKEN':\n\t\t\treturn action.payload['code']\n\t\tdefault:\n\t\t\treturn action.type;\n\t}\n}\n\nexport default authReducer;\n"]},"metadata":{},"sourceType":"module"}