{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Projects/playlist-app/client/src/App.js\";\n//This really should be moved into the compnents folder at some point\nimport React from 'react';\nimport SearchComponent from './components/SearchComponent';\nimport ControlsComponent from './components/ControlsComponent';\nimport LoginComponent from './components/LoginComponent';\nimport axios from 'axios';\nimport './App.css';\nimport actions from './redux/actions';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nconst queryString = require('querystring');\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // token: \"\",\n      deviceId: \"\",\n      loggedIn: false,\n      error: \"\",\n      trackName: \"Track Name\",\n      artistName: \"Artist Name\",\n      albumName: \"Album Name\",\n      playing: false,\n      position: 0,\n      duration: 0\n    };\n    this.playerCheckInterval = null;\n  }\n\n  componentDidMount() {\n    const parsed = queryString.parse(this.props.location.search.replace(/^\\?/, ''));\n    const code = parsed.code;\n    this.props.actions.setAccessToken(); //Our condition here should check if there is a token in the store and if it's valid\n    //If it isn't, call the backend server to get a new one. Else continue\n\n    if (false) {\n      //this will be if a token exists\n      spotifyApi.setAccessToken(code);\n      this.loadPlayer(code);\n    } else {\n      const self = this;\n      axios.get('/spotify/config', {\n        params: {\n          code: code,\n          state: 'needToDoThis' //This is explained further on the server side\n\n        }\n      }).then(response => {\n        //Need to build some error handling here\n        const access_token = response.data.access_token;\n        const refresh_token = response.data.refresh_token; //Here is where we need to dispatch the action to Redux to set the token in the store\n        //After doing this, all additional logic should be moved somewhere else\n\n        this.handleLogin();\n        this.loadPlayer(access_token);\n        spotifyApi.setAccessToken(access_token);\n      }).catch(function (error) {\n        console.log('Error: ' + error);\n      });\n    }\n  }\n\n  handleLogin() {\n    // if (this.state.token !== \"\") {\n    this.setState({\n      loggedIn: true\n    }); //   // check every second for the player.\n    //   // this.playerCheckInterval = setInterval(() => this.checkForPlayer(), 1000);\n    // }\n  }\n\n  async waitForSpotifyWebPlaybackSDKToLoad() {\n    return new Promise(resolve => {\n      if (window.Spotify) {\n        resolve(window.Spotify);\n      } else {\n        window.onSpotifyWebPlaybackSDKReady = () => {\n          resolve(window.Spotify);\n        };\n      }\n    });\n  }\n\n  loadPlayer(token) {\n    (async () => {\n      const _ref = await this.waitForSpotifyWebPlaybackSDKToLoad(),\n            Player = _ref.Player;\n\n      const sdk = new Player({\n        name: \"Mike's Test Spotify Player\",\n        getOAuthToken: cb => {\n          cb(token);\n        }\n      });\n      this.createEventHandlers(sdk, token);\n      let connected = await sdk.connect();\n\n      if (connected) {\n        let state = await sdk.getCurrentState();\n      }\n    })();\n  }\n\n  createEventHandlers(player, token) {\n    player.on('initialization_error', e => {\n      console.error(e);\n    });\n    player.on('authentication_error', e => {\n      console.error(e);\n      this.setState({\n        loggedIn: false\n      });\n    });\n    player.on('account_error', e => {\n      console.error(e);\n    });\n    player.on('playback_error', e => {\n      console.error(e);\n    }); // Playback status updates\n\n    player.on('player_state_changed', state => this.onStateChanged(state)); // Ready\n\n    player.on('ready', async data => {\n      let device_id = data.device_id;\n      console.log('ready', device_id);\n      console.log(\"Let the music play on!\");\n      await this.setState({\n        deviceId: device_id\n      });\n      this.transferPlaybackHere(device_id, token); // this.player.connect();\n    });\n  }\n\n  onStateChanged(state) {\n    // if we're no longer listening to music, we'll get a null state.\n    if (state !== null) {\n      const _state$track_window = state.track_window,\n            currentTrack = _state$track_window.current_track,\n            position = _state$track_window.position,\n            duration = _state$track_window.duration;\n      const trackName = currentTrack.name;\n      const albumName = currentTrack.album.name;\n      const artistName = currentTrack.artists.map(artist => artist.name).join(\", \");\n      const playing = !state.paused;\n      this.setState({\n        position,\n        duration,\n        trackName,\n        albumName,\n        artistName,\n        playing\n      });\n    }\n  }\n\n  transferPlaybackHere(deviceId, token) {\n    //Probably should update this with axios later\n    fetch(\"https://api.spotify.com/v1/me/player\", {\n      method: \"PUT\",\n      headers: {\n        authorization: \"Bearer \".concat(token),\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"device_ids\": [deviceId],\n        \"play\": true\n      })\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          token = _this$state.token,\n          loggedIn = _this$state.loggedIn,\n          artistName = _this$state.artistName,\n          trackName = _this$state.trackName,\n          albumName = _this$state.albumName,\n          error = _this$state.error,\n          position = _this$state.position,\n          duration = _this$state.duration,\n          playing = _this$state.playing;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"Now Playing\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"A Spotify Web Playback API Demo.\"), error && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"Error: \", error), loggedIn ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(SearchComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"Artist: \", artistName), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"Track: \", trackName), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"Album: \", albumName), React.createElement(ControlsComponent, {\n      playing: playing,\n      player: this.player,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(LoginComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }), token)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"Access code: \", this.props.accessToken)));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return state;\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(actions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/mike/Projects/playlist-app/client/src/App.js"],"names":["React","SearchComponent","ControlsComponent","LoginComponent","axios","actions","connect","bindActionCreators","SpotifyWebApi","spotifyApi","queryString","require","App","Component","constructor","props","state","deviceId","loggedIn","error","trackName","artistName","albumName","playing","position","duration","playerCheckInterval","componentDidMount","parsed","parse","location","search","replace","code","setAccessToken","loadPlayer","self","get","params","then","response","access_token","data","refresh_token","handleLogin","catch","console","log","setState","waitForSpotifyWebPlaybackSDKToLoad","Promise","resolve","window","Spotify","onSpotifyWebPlaybackSDKReady","token","Player","sdk","name","getOAuthToken","cb","createEventHandlers","connected","getCurrentState","player","on","e","onStateChanged","device_id","transferPlaybackHere","track_window","currentTrack","current_track","album","artists","map","artist","join","paused","fetch","method","headers","authorization","body","JSON","stringify","render","accessToken","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["//This really should be moved into the compnents folder at some point\n\nimport React from 'react';\nimport SearchComponent from './components/SearchComponent'\nimport ControlsComponent from './components/ControlsComponent'\nimport LoginComponent from './components/LoginComponent'\nimport axios from 'axios';\nimport './App.css';\n\nimport actions from './redux/actions';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nconst queryString = require('querystring');\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // token: \"\",\n      deviceId: \"\",\n      loggedIn: false,\n      error: \"\",\n      trackName: \"Track Name\",\n      artistName: \"Artist Name\",\n      albumName: \"Album Name\",\n      playing: false,\n      position: 0,\n      duration: 0,\n    };\n    this.playerCheckInterval = null;\n  }\n  componentDidMount() {\n    const parsed = queryString.parse(this.props.location.search.replace(/^\\?/, ''));\n    const code = parsed.code\n    this.props.actions.setAccessToken()\n    //Our condition here should check if there is a token in the store and if it's valid\n    //If it isn't, call the backend server to get a new one. Else continue\n    if (false){ //this will be if a token exists\n      spotifyApi.setAccessToken(code);\n      this.loadPlayer(code);\n    } else {\n      const self = this\n      axios.get('/spotify/config', {\n      params: {\n          code: code,\n          state: 'needToDoThis' //This is explained further on the server side\n        }\n      })\n      .then((response) => {\n        //Need to build some error handling here\n        const access_token = response.data.access_token;\n        const refresh_token = response.data.refresh_token;\n        //Here is where we need to dispatch the action to Redux to set the token in the store\n        //After doing this, all additional logic should be moved somewhere else\n        this.handleLogin();\n        this.loadPlayer(access_token);\n        spotifyApi.setAccessToken(access_token);\n      })\n      .catch(function (error) {\n        console.log('Error: ' + error);\n      });\n    }\n  }\n  handleLogin() {\n    // if (this.state.token !== \"\") {\n      this.setState({ loggedIn: true });\n    //   // check every second for the player.\n    //   // this.playerCheckInterval = setInterval(() => this.checkForPlayer(), 1000);\n    // }\n  }\n  async waitForSpotifyWebPlaybackSDKToLoad () {\n    return new Promise(resolve => {\n      if (window.Spotify) {\n        resolve(window.Spotify);\n      } else {\n        window.onSpotifyWebPlaybackSDKReady = () => {\n          resolve(window.Spotify);\n        };\n      }\n    });\n  };\n\n  loadPlayer(token){\n    (async () => {\n      const { Player } = await this.waitForSpotifyWebPlaybackSDKToLoad();\n      const sdk = new Player({\n        name: \"Mike's Test Spotify Player\",\n        getOAuthToken: cb => { cb(token); },\n      });\n      this.createEventHandlers(sdk, token);\n      let connected = await sdk.connect();\n      if (connected) {\n        let state = await sdk.getCurrentState();\n      }\n    })();\n  }\n\n  createEventHandlers(player, token) {\n    player.on('initialization_error', e => { console.error(e); });\n    player.on('authentication_error', e => {\n      console.error(e);\n      this.setState({ loggedIn: false });\n    });\n    player.on('account_error', e => { console.error(e); });\n    player.on('playback_error', e => { console.error(e); });\n\n    // Playback status updates\n    player.on('player_state_changed', state => this.onStateChanged(state));\n\n    // Ready\n    player.on('ready', async data => {\n      let { device_id } = data;\n      console.log('ready', device_id)\n      console.log(\"Let the music play on!\");\n      await this.setState({ deviceId: device_id });\n      this.transferPlaybackHere(device_id, token);\n      // this.player.connect();\n    });\n  }\n  onStateChanged(state) {\n    // if we're no longer listening to music, we'll get a null state.\n    if (state !== null) {\n      const {\n        current_track: currentTrack,\n        position,\n        duration,\n      } = state.track_window;\n      const trackName = currentTrack.name;\n      const albumName = currentTrack.album.name;\n      const artistName = currentTrack.artists\n        .map(artist => artist.name)\n        .join(\", \");\n      const playing = !state.paused;\n      this.setState({\n        position,\n        duration,\n        trackName,\n        albumName,\n        artistName,\n        playing\n      });\n    }\n  }\n\n  transferPlaybackHere(deviceId, token) {\n    //Probably should update this with axios later\n    fetch(\"https://api.spotify.com/v1/me/player\", {\n      method: \"PUT\",\n      headers: {\n        authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        \"device_ids\": [ deviceId ],\n        \"play\": true,\n      }),\n    });\n  }\n  render() {\n    const {\n      token,\n      loggedIn,\n      artistName,\n      trackName,\n      albumName,\n      error,\n      position,\n      duration,\n      playing,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h2>Now Playing</h2>\n          <p>A Spotify Web Playback API Demo.</p>\n\n        {error && <p>Error: {error}</p>}\n\n        {loggedIn ?\n        (<div>\n          <SearchComponent/>\n          <p>Artist: {artistName}</p>\n          <p>Track: {trackName}</p>\n          <p>Album: {albumName}</p>\n          <ControlsComponent playing={playing} player={this.player}/>\n        </div>)\n        :\n        (<div>\n          <p>\n            <LoginComponent />\n            {token}\n          </p>\n        </div>)\n        }\n        <div>Access code: {this.props.accessToken}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state){\n  return state\n}\n\nfunction mapDispatchToProps(dispatch){\n  return {\n    actions: bindActionCreators(actions, dispatch)\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n"]},"metadata":{},"sourceType":"module"}